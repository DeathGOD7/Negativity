import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
    repositories {
        maven {
            name = 'forge'
            url = 'https://files.minecraftforge.net/maven'
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.1.+'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow'
}

apply plugin: 'net.minecraftforge.gradle'

sourceSets {
    main {
        java.srcDirs = ['src']
        resources.srcDirs = ['resources']
    }
}

repositories {
    maven {
        name 'spongepowered'
        url 'https://repo.spongepowered.org/maven/'
    }
}

dependencies {
    api project(':common')
    compileOnly 'org.spongepowered:spongeapi:7.1.0'

    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2855'

    implementation 'org.bstats:bstats-sponge-lite:1.7'

    compileOnly 'com.github.CrushedPixel:PacketGate:0.1.1'
}

minecraft {
    mappings channel: 'snapshot', version: '20180131-1.12'
    accessTransformer(file('resources/META-INF/negativity_at.cfg'))
}

processResources {
    def props = [version: version]
    inputs.properties(props)
    // Do not try to expand service files, they may contain a dollar sign to mark inner classes
    filesNotMatching('META-INF/services/*') {
        expand(props)
    }
}

jar.manifest {
    attributes 'FMLAT': 'negativity_at.cfg'
}

shadowJar {
    archiveBaseName.set('negativity')
    archiveAppendix.set('sponge')
    archiveClassifier.set(null)

    dependencies {
        it.include(it.project(':common'))
        it.include(it.dependency('org.bstats:bstats-sponge-lite'))
    }

    mergeServiceFiles()
    from(project(':common').tasks.shadowJar)

    exclude('dummyThing')
}

build.dependsOn shadowJar
afterEvaluate {
    shadowJar.finalizedBy reobfJar
    reobfJar {
        dependsOn shadowJar
        doFirst {
            // We have to do it in doFirst because the input is overwritten between the task configuration and execution
            input(shadowJar.archiveFile.get().asFile)
        }
    }
}

parent.tasks.named('shadowJar', ShadowJar) {
    it.from(shadowJar.outputs)
}

task prepareServer(type: Copy) {
    from shadowJar.outputs
    rename { 'negativity.jar' }
    def pluginDir = System.getProperty('plugins.dir')
    if (pluginDir == null) {
        enabled(false)
    } else {
        into pluginDir
    }
}
